finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, ytreat=ytreat, perfvar = "perf")
}
else{
rankmethod = "rulebase"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
# KM based Cut-off
kmdf = finrank
kmdf$rank = NULL
kmdf = data.frame(t(kmdf))
names(kmdf) = kmdf[1,]
kmdf = data.frame((kmdf[-1,]))
kmdf = as.data.frame(lapply(kmdf, as.numeric))
kmres = km(y = kmdf)
finrank = kmres
}
else if(rulemethod %in% c("wt_hybrid")){
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"), traindf = traindf, outvar = "y", modeltype = modeltype, wtfactor = 10)
}
else{
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"))
}
selfeat = outdat(tech = "km", resdf = finrank, pretech = paste("randomfeat", i[1], i[2], sep = "_"), algo = "Ensemble", martarget = mar, perfmetric = "F1")
selfeat[1,c("perf", "type")]
# Predictive Performance
feat = finrank$variable[finrank$rank == min(finrank$rank) & finrank$imp != 0]
mp = predperf(traindf = traindf, testdf = testdf, outvar = "y", modeltype = modeltype, selfeat = feat, pretech = paste(i[1], i[2], sep = "_"), martarget = mar, interaction = F)
# print(mp)
out = c(selfeat[1,c("perf", "type")],mp[, c("pp", "target", "noise")])
out = data.frame(out)
})
perfres
})
fullperfres2 = purrr::flatten(fullperfres)
perflist[[seqrun]] = do.call(rbind, fullperfres2)
fullperfdf = do.call(rbind, perflist)
summarydf = aggregate(. ~ type, data = fullperfdf, FUN = function(x) c(mean = mean(x), ci = unlist(colcint(x))) )
dfsum = data.frame(as.matrix(summarydf))
maxtech = which(dfsum$pp.mean == max(dfsum$pp.mean))
if(!maxtech %in% c(2,7,8)){break}
}
print(seqrun)
if(seqrun == 10){
filename = paste("reg_ensemble_pn_",p,n,"_mainvar_",mar,"_vareffect_",vareffect, "_corvar_", corvar, "_corval_", corval, "_",techie,"__rankagghyb_",bootval,"_randomfeat_kmcutoff.csv", sep = "")
write.csv(summarydf, filename)
}
})
View(testcases)
plist = c(100)
nlist = c(95)
targetfeat = c(10)
correlationval = c(5)
correlation_var= c(15)
var_effect1 = c(0.5)
var_effect2 = c(0.5)
var_effect3 = c(0.5)
var_effect4 = c(0.5)
bootval = c(100)
paralist = expand.grid(p = plist, n = nlist, mar = targetfeat, cor = correlationval, corvar = correlation_var, ve1 = var_effect1, ve2 = var_effect2, ve3 = var_effect3, ve4 = var_effect4, bootval = bootval)
testcases = paralist
testcases = testcases[testcases$p > testcases$n, ]
testcases[2,] =c(100,100,10,5,15,0.5,0.5,0.5,0.5, 100)
# Ensemble Rank Aggregation: Regression
plist = c(100)
nlist = c(95)
targetfeat = c(10)
correlationval = c(5)
correlation_var= c(15)
var_effect1 = c(0.5)
var_effect2 = c(0.5)
var_effect3 = c(0.5)
var_effect4 = c(0.5)
bootval = c(100)
paralist = expand.grid(p = plist, n = nlist, mar = targetfeat, cor = correlationval, corvar = correlation_var, ve1 = var_effect1, ve2 = var_effect2, ve3 = var_effect3, ve4 = var_effect4, bootval = bootval)
testcases = paralist
testcases = testcases[testcases$p > testcases$n, ]
testcases[2,] =c(105,100,10,5,15,0.5,0.5,0.5,0.5, 100)
testcases[3,] =c(104,100,10,5,15,0.5,0.5,0.5,0.5, 100)
testcases[4,] =c(103,100,10,5,15,0.5,0.5,0.5,0.5, 100)
testcases[5,] =c(102,100,10,5,15,0.5,0.5,0.5,0.5, 100)
testcases[6,] =c(101,100,10,5,15,0.5,0.5,0.5,0.5, 100)
testcases[7,] =c(99,100,10,5,15,0.5,0.5,0.5,0.5, 100)
testcases[8,] =c(98,100,10,5,15,0.5,0.5,0.5,0.5, 100)
testcases[9,] =c(97,100,10,5,15,0.5,0.5,0.5,0.5, 100)
testcases[10,] =c(96,100,10,5,15,0.5,0.5,0.5,0.5, 100)
techie = c("ridge")
val = pbapply::pblapply(1:2, function(scene){
# Define parameters
cat(scene, " ")
p = testcases$p[scene]
n = testcases$n[scene]
mar = testcases$mar[scene]
corval = testcases$cor[scene]
corvar = testcases$corvar[scene]
var_effect = as.numeric(testcases[scene, c("ve1", "ve2", "ve3", "ve4")])
bootval = testcases$bootval[scene]
modeltype = "regression"
vareffect = stringi::stri_replace_all_fixed(stringi::stri_replace_all_fixed(paste(var_effect, collapse = ""), "0.", ""), "-","neg")
# Run Analysis
fullperfres = pbapply::pblapply(seqrun:seqrun, function(j){
set.seed(j)
sampleregdf= regdataset(p, train_sample = n, var = "No_Int", setting = "Correlation", datadist = c("normal"), corr = c("fixed"), seed = j, main_var=mar, var_effect=var_effect, correlation_var=corvar, correlation_val=corval)
traindf = sampleregdf[[1]]
testdf = sampleregdf[[2]]
# Run each ensemble method
tech = techie
res = ensem_homo(df = traindf, outvar = "y", modeltype = modeltype, technique = tech, sampletype = "bootsample", fstype = "randomfeat", maxfeatsample = ncol(traindf)-1, boots = bootval, savememory = F, Trace = F, parallel = T, smart = T, perfparallel = F)
alltech = alltechlist(rulemethod = c("sd","min", "max", "mean", "median","ridge", "rfauto", "lasso", "rra",  "coefv", "ttest", "wmw"))
perfres = lapply(1:nrow(alltech), function(i){
res[[2]]$perf = res[[2]]$perf/max(res[[2]]$perf)
# Rank Aggregation Method
rameth = c(single = rankaggfun)
# Rank Aggregation with km based cutoff
rulemethod = alltech[i,1]
i = c(rulemethod, tech)
# print(i)
if(!rulemethod %in% c("serial", "parallel", "hybrid", "wt_hybrid")){
if(rulemethod == "cormeth"){
rankmethod = "unsuprankagg"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
else if(rulemethod %in% c("ridge","rf", "lasso","ann", "rfauto","autoann")){
rankmethod = "suprankagg"
ytreat = "No"
i = c(rulemethod, ytreat)
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, ytreat=ytreat, perfvar = "perf")
}
else{
rankmethod = "rulebase"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
# KM based Cut-off
kmdf = finrank
kmdf$rank = NULL
kmdf = data.frame(t(kmdf))
names(kmdf) = kmdf[1,]
kmdf = data.frame((kmdf[-1,]))
kmdf = as.data.frame(lapply(kmdf, as.numeric))
kmres = km(y = kmdf)
finrank = kmres
}
else if(rulemethod %in% c("wt_hybrid")){
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"), traindf = traindf, outvar = "y", modeltype = modeltype, wtfactor = 10)
}
else{
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"))
}
selfeat = outdat(tech = "km", resdf = finrank, pretech = paste("randomfeat", i[1], i[2], sep = "_"), algo = "Ensemble", martarget = mar, perfmetric = "F1")
selfeat[1,c("perf", "type")]
# Predictive Performance
feat = finrank$variable[finrank$rank == min(finrank$rank) & finrank$imp != 0]
mp = predperf(traindf = traindf, testdf = testdf, outvar = "y", modeltype = modeltype, selfeat = feat, pretech = paste(i[1], i[2], sep = "_"), martarget = mar, interaction = F)
# print(mp)
out = c(selfeat[1,c("perf", "type")],mp[, c("pp", "target", "noise")])
out = data.frame(out)
})
perfres
})
fullperfres2 = purrr::flatten(fullperfres)
fullperfdf = do.call(rbind, fullperfres2)
fullperfdf = do.call(rbind, perflist)
summarydf = aggregate(. ~ type, data = fullperfdf, FUN = function(x) c(mean = mean(x), ci = unlist(colcint(x))) )
dfsum = data.frame(as.matrix(summarydf))
maxtech = which(dfsum$pp.mean == max(dfsum$pp.mean))
if(!maxtech %in% c(2,7,8)){print("Better Luck Next Time");NA}
else{
print("Thank You!")
filename = paste("reg_ensemble_pn_",p,n,"_mainvar_",mar,"_vareffect_",vareffect, "_corvar_", corvar, "_corval_", corval, "_",techie,"__rankagghyb_",bootval,"_randomfeat_kmcutoff.csv", sep = "")
write.csv(summarydf, filename)
}
})
val = pbapply::pblapply(1:2, function(scene){
# Define parameters
cat(scene, " ")
p = testcases$p[scene]
n = testcases$n[scene]
mar = testcases$mar[scene]
corval = testcases$cor[scene]
corvar = testcases$corvar[scene]
var_effect = as.numeric(testcases[scene, c("ve1", "ve2", "ve3", "ve4")])
bootval = testcases$bootval[scene]
modeltype = "regression"
vareffect = stringi::stri_replace_all_fixed(stringi::stri_replace_all_fixed(paste(var_effect, collapse = ""), "0.", ""), "-","neg")
# Run Analysis
fullperfres = pbapply::pblapply(1:10, function(j){
set.seed(j)
sampleregdf= regdataset(p, train_sample = n, var = "No_Int", setting = "Correlation", datadist = c("normal"), corr = c("fixed"), seed = j, main_var=mar, var_effect=var_effect, correlation_var=corvar, correlation_val=corval)
traindf = sampleregdf[[1]]
testdf = sampleregdf[[2]]
# Run each ensemble method
tech = techie
res = ensem_homo(df = traindf, outvar = "y", modeltype = modeltype, technique = tech, sampletype = "bootsample", fstype = "randomfeat", maxfeatsample = ncol(traindf)-1, boots = bootval, savememory = F, Trace = F, parallel = T, smart = T, perfparallel = F)
alltech = alltechlist(rulemethod = c("sd","min", "max", "mean", "median","ridge", "rfauto", "lasso", "rra",  "coefv", "ttest", "wmw"))
perfres = lapply(1:nrow(alltech), function(i){
res[[2]]$perf = res[[2]]$perf/max(res[[2]]$perf)
# Rank Aggregation Method
rameth = c(single = rankaggfun)
# Rank Aggregation with km based cutoff
rulemethod = alltech[i,1]
i = c(rulemethod, tech)
# print(i)
if(!rulemethod %in% c("serial", "parallel", "hybrid", "wt_hybrid")){
if(rulemethod == "cormeth"){
rankmethod = "unsuprankagg"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
else if(rulemethod %in% c("ridge","rf", "lasso","ann", "rfauto","autoann")){
rankmethod = "suprankagg"
ytreat = "No"
i = c(rulemethod, ytreat)
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, ytreat=ytreat, perfvar = "perf")
}
else{
rankmethod = "rulebase"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
# KM based Cut-off
kmdf = finrank
kmdf$rank = NULL
kmdf = data.frame(t(kmdf))
names(kmdf) = kmdf[1,]
kmdf = data.frame((kmdf[-1,]))
kmdf = as.data.frame(lapply(kmdf, as.numeric))
kmres = km(y = kmdf)
finrank = kmres
}
else if(rulemethod %in% c("wt_hybrid")){
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"), traindf = traindf, outvar = "y", modeltype = modeltype, wtfactor = 10)
}
else{
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"))
}
selfeat = outdat(tech = "km", resdf = finrank, pretech = paste("randomfeat", i[1], i[2], sep = "_"), algo = "Ensemble", martarget = mar, perfmetric = "F1")
selfeat[1,c("perf", "type")]
# Predictive Performance
feat = finrank$variable[finrank$rank == min(finrank$rank) & finrank$imp != 0]
mp = predperf(traindf = traindf, testdf = testdf, outvar = "y", modeltype = modeltype, selfeat = feat, pretech = paste(i[1], i[2], sep = "_"), martarget = mar, interaction = F)
# print(mp)
out = c(selfeat[1,c("perf", "type")],mp[, c("pp", "target", "noise")])
out = data.frame(out)
})
perfres
})
fullperfres2 = purrr::flatten(fullperfres)
fullperfdf = do.call(rbind, fullperfres2)
fullperfdf = do.call(rbind, perflist)
summarydf = aggregate(. ~ type, data = fullperfdf, FUN = function(x) c(mean = mean(x), ci = unlist(colcint(x))) )
dfsum = data.frame(as.matrix(summarydf))
maxtech = which(dfsum$pp.mean == max(dfsum$pp.mean))
if(!maxtech %in% c(2,7,8)){print("Better Luck Next Time");NA}
else{
print("Thank You!")
filename = paste("reg_ensemble_pn_",p,n,"_mainvar_",mar,"_vareffect_",vareffect, "_corvar_", corvar, "_corval_", corval, "_",techie,"__rankagghyb_",bootval,"_randomfeat_kmcutoff.csv", sep = "")
write.csv(summarydf, filename)
}
})
val = pbapply::pblapply(1:2, function(scene){
# Define parameters
cat(scene, " ")
p = testcases$p[scene]
n = testcases$n[scene]
mar = testcases$mar[scene]
corval = testcases$cor[scene]
corvar = testcases$corvar[scene]
var_effect = as.numeric(testcases[scene, c("ve1", "ve2", "ve3", "ve4")])
bootval = testcases$bootval[scene]
modeltype = "regression"
vareffect = stringi::stri_replace_all_fixed(stringi::stri_replace_all_fixed(paste(var_effect, collapse = ""), "0.", ""), "-","neg")
# Run Analysis
fullperfres = pbapply::pblapply(1:10, function(j){
set.seed(j)
sampleregdf= regdataset(p, train_sample = n, var = "No_Int", setting = "Correlation", datadist = c("normal"), corr = c("fixed"), seed = j, main_var=mar, var_effect=var_effect, correlation_var=corvar, correlation_val=corval)
traindf = sampleregdf[[1]]
testdf = sampleregdf[[2]]
# Run each ensemble method
tech = techie
res = ensem_homo(df = traindf, outvar = "y", modeltype = modeltype, technique = tech, sampletype = "bootsample", fstype = "randomfeat", maxfeatsample = ncol(traindf)-1, boots = bootval, savememory = F, Trace = F, parallel = T, smart = T, perfparallel = F)
alltech = alltechlist(rulemethod = c("sd","min", "max", "mean", "median","ridge", "rfauto", "lasso", "rra",  "coefv", "ttest", "wmw"))
perfres = lapply(1:nrow(alltech), function(i){
res[[2]]$perf = res[[2]]$perf/max(res[[2]]$perf)
# Rank Aggregation Method
rameth = c(single = rankaggfun)
# Rank Aggregation with km based cutoff
rulemethod = alltech[i,1]
i = c(rulemethod, tech)
# print(i)
if(!rulemethod %in% c("serial", "parallel", "hybrid", "wt_hybrid")){
if(rulemethod == "cormeth"){
rankmethod = "unsuprankagg"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
else if(rulemethod %in% c("ridge","rf", "lasso","ann", "rfauto","autoann")){
rankmethod = "suprankagg"
ytreat = "No"
i = c(rulemethod, ytreat)
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, ytreat=ytreat, perfvar = "perf")
}
else{
rankmethod = "rulebase"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
# KM based Cut-off
kmdf = finrank
kmdf$rank = NULL
kmdf = data.frame(t(kmdf))
names(kmdf) = kmdf[1,]
kmdf = data.frame((kmdf[-1,]))
kmdf = as.data.frame(lapply(kmdf, as.numeric))
kmres = km(y = kmdf)
finrank = kmres
}
else if(rulemethod %in% c("wt_hybrid")){
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"), traindf = traindf, outvar = "y", modeltype = modeltype, wtfactor = 10)
}
else{
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"))
}
selfeat = outdat(tech = "km", resdf = finrank, pretech = paste("randomfeat", i[1], i[2], sep = "_"), algo = "Ensemble", martarget = mar, perfmetric = "F1")
selfeat[1,c("perf", "type")]
# Predictive Performance
feat = finrank$variable[finrank$rank == min(finrank$rank) & finrank$imp != 0]
mp = predperf(traindf = traindf, testdf = testdf, outvar = "y", modeltype = modeltype, selfeat = feat, pretech = paste(i[1], i[2], sep = "_"), martarget = mar, interaction = F)
# print(mp)
out = c(selfeat[1,c("perf", "type")],mp[, c("pp", "target", "noise")])
out = data.frame(out)
})
perfres
})
fullperfres2 = purrr::flatten(fullperfres)
fullperfdf = do.call(rbind, fullperfres2)
summarydf = aggregate(. ~ type, data = fullperfdf, FUN = function(x) c(mean = mean(x), ci = unlist(colcint(x))) )
dfsum = data.frame(as.matrix(summarydf))
maxtech = which(dfsum$pp.mean == max(dfsum$pp.mean))
if(!maxtech %in% c(2,7,8)){print("Better Luck Next Time");NA}
else{
print("Thank You!")
filename = paste("reg_ensemble_pn_",p,n,"_mainvar_",mar,"_vareffect_",vareffect, "_corvar_", corvar, "_corval_", corval, "_",techie,"__rankagghyb_",bootval,"_randomfeat_kmcutoff.csv", sep = "")
write.csv(summarydf, filename)
}
})
val = pbapply::pblapply(3:10, function(scene){
# Define parameters
cat(scene, " ")
p = testcases$p[scene]
n = testcases$n[scene]
mar = testcases$mar[scene]
corval = testcases$cor[scene]
corvar = testcases$corvar[scene]
var_effect = as.numeric(testcases[scene, c("ve1", "ve2", "ve3", "ve4")])
bootval = testcases$bootval[scene]
modeltype = "regression"
vareffect = stringi::stri_replace_all_fixed(stringi::stri_replace_all_fixed(paste(var_effect, collapse = ""), "0.", ""), "-","neg")
# Run Analysis
fullperfres = pbapply::pblapply(1:10, function(j){
set.seed(j)
sampleregdf= regdataset(p, train_sample = n, var = "No_Int", setting = "Correlation", datadist = c("normal"), corr = c("fixed"), seed = j, main_var=mar, var_effect=var_effect, correlation_var=corvar, correlation_val=corval)
traindf = sampleregdf[[1]]
testdf = sampleregdf[[2]]
# Run each ensemble method
tech = techie
res = ensem_homo(df = traindf, outvar = "y", modeltype = modeltype, technique = tech, sampletype = "bootsample", fstype = "randomfeat", maxfeatsample = ncol(traindf)-1, boots = bootval, savememory = F, Trace = F, parallel = T, smart = T, perfparallel = F)
alltech = alltechlist(rulemethod = c("sd","min", "max", "mean", "median","ridge", "rfauto", "lasso", "rra",  "coefv", "ttest", "wmw"))
perfres = lapply(1:nrow(alltech), function(i){
res[[2]]$perf = res[[2]]$perf/max(res[[2]]$perf)
# Rank Aggregation Method
rameth = c(single = rankaggfun)
# Rank Aggregation with km based cutoff
rulemethod = alltech[i,1]
i = c(rulemethod, tech)
# print(i)
if(!rulemethod %in% c("serial", "parallel", "hybrid", "wt_hybrid")){
if(rulemethod == "cormeth"){
rankmethod = "unsuprankagg"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
else if(rulemethod %in% c("ridge","rf", "lasso","ann", "rfauto","autoann")){
rankmethod = "suprankagg"
ytreat = "No"
i = c(rulemethod, ytreat)
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, ytreat=ytreat, perfvar = "perf")
}
else{
rankmethod = "rulebase"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
# KM based Cut-off
kmdf = finrank
kmdf$rank = NULL
kmdf = data.frame(t(kmdf))
names(kmdf) = kmdf[1,]
kmdf = data.frame((kmdf[-1,]))
kmdf = as.data.frame(lapply(kmdf, as.numeric))
kmres = km(y = kmdf)
finrank = kmres
}
else if(rulemethod %in% c("wt_hybrid")){
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"), traindf = traindf, outvar = "y", modeltype = modeltype, wtfactor = 10)
}
else{
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"))
}
selfeat = outdat(tech = "km", resdf = finrank, pretech = paste("randomfeat", i[1], i[2], sep = "_"), algo = "Ensemble", martarget = mar, perfmetric = "F1")
selfeat[1,c("perf", "type")]
# Predictive Performance
feat = finrank$variable[finrank$rank == min(finrank$rank) & finrank$imp != 0]
mp = predperf(traindf = traindf, testdf = testdf, outvar = "y", modeltype = modeltype, selfeat = feat, pretech = paste(i[1], i[2], sep = "_"), martarget = mar, interaction = F)
# print(mp)
out = c(selfeat[1,c("perf", "type")],mp[, c("pp", "target", "noise")])
out = data.frame(out)
})
perfres
})
fullperfres2 = purrr::flatten(fullperfres)
fullperfdf = do.call(rbind, fullperfres2)
summarydf = aggregate(. ~ type, data = fullperfdf, FUN = function(x) c(mean = mean(x), ci = unlist(colcint(x))) )
dfsum = data.frame(as.matrix(summarydf))
maxtech = which(dfsum$pp.mean == max(dfsum$pp.mean))
if(!maxtech %in% c(2,7,8)){print("Better Luck Next Time");NA}
else{
print("Thank You!")
filename = paste("reg_ensemble_pn_",p,n,"_mainvar_",mar,"_vareffect_",vareffect, "_corvar_", corvar, "_corval_", corval, "_",techie,"__rankagghyb_",bootval,"_randomfeat_kmcutoff.csv", sep = "")
write.csv(summarydf, filename)
}
})
val = pbapply::pblapply(7:10, function(scene){
# Define parameters
cat(scene, " ")
p = testcases$p[scene]
n = testcases$n[scene]
mar = testcases$mar[scene]
corval = testcases$cor[scene]
corvar = testcases$corvar[scene]
var_effect = as.numeric(testcases[scene, c("ve1", "ve2", "ve3", "ve4")])
bootval = testcases$bootval[scene]
modeltype = "regression"
vareffect = stringi::stri_replace_all_fixed(stringi::stri_replace_all_fixed(paste(var_effect, collapse = ""), "0.", ""), "-","neg")
# Run Analysis
fullperfres = pbapply::pblapply(1:10, function(j){
set.seed(j)
sampleregdf= regdataset(p, train_sample = n, var = "No_Int", setting = "Correlation", datadist = c("normal"), corr = c("fixed"), seed = j, main_var=mar, var_effect=var_effect, correlation_var=corvar, correlation_val=corval)
traindf = sampleregdf[[1]]
testdf = sampleregdf[[2]]
# Run each ensemble method
tech = techie
res = ensem_homo(df = traindf, outvar = "y", modeltype = modeltype, technique = tech, sampletype = "bootsample", fstype = "randomfeat", maxfeatsample = ncol(traindf)-1, boots = bootval, savememory = F, Trace = F, parallel = T, smart = T, perfparallel = F)
alltech = alltechlist(rulemethod = c("sd","min", "max", "mean", "median","ridge", "rfauto", "lasso", "rra",  "coefv", "ttest", "wmw"))
perfres = lapply(1:nrow(alltech), function(i){
res[[2]]$perf = res[[2]]$perf/max(res[[2]]$perf)
# Rank Aggregation Method
rameth = c(single = rankaggfun)
# Rank Aggregation with km based cutoff
rulemethod = alltech[i,1]
i = c(rulemethod, tech)
# print(i)
if(!rulemethod %in% c("serial", "parallel", "hybrid", "wt_hybrid")){
if(rulemethod == "cormeth"){
rankmethod = "unsuprankagg"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
else if(rulemethod %in% c("ridge","rf", "lasso","ann", "rfauto","autoann")){
rankmethod = "suprankagg"
ytreat = "No"
i = c(rulemethod, ytreat)
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, ytreat=ytreat, perfvar = "perf")
}
else{
rankmethod = "rulebase"
finrank = rankaggfun(ranklist = res[[2]], rankmethod = rankmethod, rulemethod = rulemethod, perfvar = "perf")
}
# KM based Cut-off
kmdf = finrank
kmdf$rank = NULL
kmdf = data.frame(t(kmdf))
names(kmdf) = kmdf[1,]
kmdf = data.frame((kmdf[-1,]))
kmdf = as.data.frame(lapply(kmdf, as.numeric))
kmres = km(y = kmdf)
finrank = kmres
}
else if(rulemethod %in% c("wt_hybrid")){
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"), traindf = traindf, outvar = "y", modeltype = modeltype, wtfactor = 10)
}
else{
finrank = rameth[[rulemethod]](ranklist = res[[2]], rankmethod = NA, rulemethod = c("min", "max", "mean", "median","freq", "ridge","rfauto", "lasso", "rra", "coefv", "ttest", "wmw"), perfvar = "perf", metric = c("featimp"))
}
selfeat = outdat(tech = "km", resdf = finrank, pretech = paste("randomfeat", i[1], i[2], sep = "_"), algo = "Ensemble", martarget = mar, perfmetric = "F1")
selfeat[1,c("perf", "type")]
# Predictive Performance
feat = finrank$variable[finrank$rank == min(finrank$rank) & finrank$imp != 0]
mp = predperf(traindf = traindf, testdf = testdf, outvar = "y", modeltype = modeltype, selfeat = feat, pretech = paste(i[1], i[2], sep = "_"), martarget = mar, interaction = F)
# print(mp)
out = c(selfeat[1,c("perf", "type")],mp[, c("pp", "target", "noise")])
out = data.frame(out)
})
perfres
})
fullperfres2 = purrr::flatten(fullperfres)
fullperfdf = do.call(rbind, fullperfres2)
summarydf = aggregate(. ~ type, data = fullperfdf, FUN = function(x) c(mean = mean(x), ci = unlist(colcint(x))) )
dfsum = data.frame(as.matrix(summarydf))
maxtech = which(dfsum$pp.mean == max(dfsum$pp.mean))
if(!maxtech %in% c(2,7,8)){print("Better Luck Next Time");NA}
else{
print("Thank You!")
filename = paste("reg_ensemble_pn_",p,n,"_mainvar_",mar,"_vareffect_",vareffect, "_corvar_", corvar, "_corval_", corval, "_",techie,"__rankagghyb_",bootval,"_randomfeat_kmcutoff.csv", sep = "")
write.csv(summarydf, filename)
}
})
load("C:/Users/rahi1/Downloads/sample_age_methylation_v1/sample_age.RData")
View(sample_age)
sample_age <- read.table("C:/Users/rahi1/Downloads/sample_age_methylation_v1/sample_age.txt", quote="\"", comment.char="")
View(sample_age)
